# 🧠 Task Manager API

A **RESTful API** to manage tasks for authenticated users. Built using **Node.js**, **Express.js**, and **MongoDB**, this backend project includes JWT authentication, task management, filtering, sorting, validation, email notifications, and security enhancements.

---

## 🎯 Project Goal

To build a robust and secure backend for managing personal tasks, complete with authentication, advanced query features, and deployment readiness.

---

## ✅ PART 1: Project Setup

### 📦 Packages

```bash
npm init -y
npm install express mongoose dotenv nodemon

📁 Folder Structure

task-manager/
├── config/
├── controllers/
├── models/
├── routes/
├── middleware/
├── .env
├── server.js

✅ PART 2: Connect MongoDB & Setup Server

    Create .env file and add:

PORT=3100
MONGO_URI=your_mongodb_connection_uri

    Connect to MongoDB:

mongoose.connect(process.env.MONGO_URI);

    Add a test route to verify server is running.

✅ PART 3: User Authentication
📦 Extra Packages

npm install bcryptjs jsonwebtoken

Features

    Register and login users

    Hash passwords using bcryptjs

    Generate JWTs on successful login

Routes

POST /api/auth/register
POST /api/auth/login

✅ PART 4: Middleware Setup

Create authMiddleware to verify JWT and protect task routes:

const auth = (req, res, next) => {
  // Verify JWT and attach user info to request
};

✅ PART 5: Task CRUD API
Task Model Fields

    title (String)

    description (String)

    status (pending/in-progress/completed)

    dueDate (Date)

    createdBy (User ID)

Routes

POST    /api/tasks
GET     /api/tasks
GET     /api/tasks/:id
PUT     /api/tasks/:id
DELETE  /api/tasks/:id

    Only the task creator can view or edit their tasks.

✅ PART 6: Filtering, Sorting & Pagination
Example Query

GET /api/tasks?status=completed&sort=dueDate&limit=5&page=2

Mongoose Example

Task.find({ createdBy: req.user.id, status: req.query.status });

✅ PART 7: Input Validation
📦 Package

npm install express-validator

Validate inputs for required fields, string types, date formats, etc.
✅ PART 8: Rate Limiting & Security
📦 Packages

npm install express-rate-limit helmet cors

Usage

app.use(helmet());
app.use(cors());
app.use(rateLimit({ windowMs: 15 * 60 * 1000, max: 100 }));

✅ PART 9: Error Handling & Response Standardization
Response Format

{
  "success": true,
  "data": { ... },
  "message": "Task created successfully"
}

Add a centralized error handler middleware for consistent error responses.
✅ PART 10: Testing API Endpoints

Use Postman or Thunder Client to test:

    🔐 Auth: Register/Login

    📋 Task CRUD: Create, Read, Update, Delete

    🔍 Filters: Status, sorting, pagination

✅ PART 11: Bonus Features

    🧠 Task reminders using node-cron

    📤 Export tasks as CSV or PDF

    🔺 Priority levels (low, medium, high)

    ✉️ Email notifications using nodemailer

Nodemailer Setup Example

EMAIL_USER=your_email@example.com
EMAIL_PASS=your_password

✅ PART 12: Deployment

Deploy on Render, Vercel (serverless), or Railway.

    Use MongoDB Atlas for cloud DB

    Add environment variables to the deployment platform

    Use process.env safely for config

🧪 Run the Project Locally

npm run dev
# or
node server.js

Visit: http://localhost:3100
🤝 Contributing

    Fork the project

    Create your branch (git checkout -b feature/feature-name)

    Commit your changes (git commit -m "Add feature")

    Push to the branch (git push origin feature-name)

    Open a Pull Request

📘 License

Licensed under the MIT License.
🙌 Acknowledgments

    Express

    MongoDB

    Mongoose

    JWT

    Nodemailer

    bcryptjs

    💻 Created by Japneet Singh

